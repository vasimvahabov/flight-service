plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.travelbookingsystem'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

ext {
	lombokVersion = '1.18.38'
	springCloudVersion = '2025.0.0'
	testContainersVersion = '1.21.3'
	mapstructVersion = '1.6.3'
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	implementation 'org.liquibase:liquibase-core'
//	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
//	implementation 'org.springframework.retry:spring-retry'

	compileOnly "org.projectlombok:lombok:$lombokVersion"

	runtimeOnly 'org.postgresql:postgresql'

	annotationProcessor "org.projectlombok:lombok:$lombokVersion"
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
	testImplementation "org.testcontainers:postgresql"

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	testCompileOnly "org.projectlombok:lombok:$lombokVersion"

	testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
		mavenBom "org.testcontainers:testcontainers-bom:${testContainersVersion}"
	}
}

tasks.register('printParameters') {
    doLast {
        if (!project.gradle.startParameter.projectProperties.isEmpty()) {
            println "Passed -P parameters:"
            project.gradle.startParameter.projectProperties.each { key, value ->
                println "$key = $value"
            }
        } else {
            println "No -P parameters passed..."
        }
    }
}

//bootRun {
//    systemProperty 'application.test-data-enabled', 'true'
//}

tasks.named('test') {
	useJUnitPlatform()
}

bootBuildImage {
    builder = "docker.io/paketobuildpacks/builder-jammy-base"
    version = project.findProperty("version")
    imageName = project.findProperty("imageName") + ":" + version
    publish = project.findProperty("publishImage")?.toBoolean() ?: false
    environment = [
            "BP_JVM_VERSION": JavaVersion.current().majorVersion
    ]
    verboseLogging = true

    docker {
        publishRegistry {
            username = project.findProperty("registryUsername")
            password = project.findProperty("registryToken")
            url = project.findProperty("registryUrl")
        }
    }
}